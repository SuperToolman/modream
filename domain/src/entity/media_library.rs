//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.11
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "MediaLibrary")]
pub struct Model {
    #[sea_orm(column_name = "Id", primary_key)]
    pub id: i32,
    #[sea_orm(column_name = "CreateTime", column_type = "custom(\"DATETIME\")")]
    pub create_time: String,
    #[sea_orm(column_name = "UpdateTime", column_type = "custom(\"DATETIME\")")]
    pub update_time: String,
    #[sea_orm(column_name = "Title", column_type = "Text")]
    pub title: String,
    #[sea_orm(column_name = "PathsJson", column_type = "Text")]
    pub paths_json: String,
    #[sea_orm(column_name = "Source", column_type = "Text")]
    pub source: String,
    #[sea_orm(column_name = "MediaType", column_type = "Text")]
    pub media_type: String,
    #[sea_orm(column_name = "LastScanned", column_type = "custom(\"DATETIME\")")]
    pub last_scanned: String,
    #[sea_orm(column_name = "ItemCount")]
    pub item_count: i32,
    #[sea_orm(column_name = "Cover", column_type = "Text", nullable)]
    pub cover: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::manga::Entity")]
    Manga
}

impl Related<super::manga::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Manga.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// ============================================================================
// 业务方法（充血模型）
// ============================================================================

impl Model {
    /// 创建新媒体库（工厂方法）
    ///
    /// # 参数
    /// - `title`: 媒体库标题
    /// - `paths_json`: 路径 JSON
    /// - `source`: 来源
    /// - `media_type`: 媒体类型
    /// - `item_count`: 项目数量
    ///
    /// # 返回
    /// - `anyhow::Result<Self>` - 创建的媒体库实体
    ///
    /// # 业务规则
    /// - 标题不能为空，长度不超过 100 个字符
    /// - 路径 JSON 必须是有效的 JSON 数组
    /// - 媒体类型必须是有效的类型
    /// - 项目数量必须大于等于 0
    pub fn new(
        title: String,
        paths_json: String,
        source: String,
        media_type: String,
        item_count: i32,
    ) -> anyhow::Result<Self> {
        // 使用领域服务验证业务规则
        crate::service::MediaLibraryDomainService::validate_title(&title)?;
        crate::service::MediaLibraryDomainService::validate_paths_json(&paths_json)?;
        crate::service::MediaLibraryDomainService::validate_media_type(&media_type)?;
        crate::service::MediaLibraryDomainService::validate_item_count(item_count)?;

        let now = chrono::Local::now().format("%Y-%m-%d %H:%M:%S").to_string();
        Ok(Self {
            id: 0, // 数据库会自动生成
            title,
            paths_json,
            source,
            media_type,
            item_count,
            create_time: now.clone(),
            update_time: now.clone(),
            last_scanned: now,
            cover: None,
        })
    }

    /// 更新标题
    ///
    /// # 参数
    /// - `new_title`: 新标题
    ///
    /// # 业务规则
    /// - 标题不能为空，长度不超过 100 个字符
    pub fn update_title(&mut self, new_title: String) -> anyhow::Result<()> {
        crate::service::MediaLibraryDomainService::validate_title(&new_title)?;
        self.title = new_title;
        self.update_time = chrono::Local::now().format("%Y-%m-%d %H:%M:%S").to_string();
        Ok(())
    }

    /// 更新路径
    ///
    /// # 参数
    /// - `new_paths_json`: 新路径 JSON
    ///
    /// # 业务规则
    /// - 路径 JSON 必须是有效的 JSON 数组
    pub fn update_paths(&mut self, new_paths_json: String) -> anyhow::Result<()> {
        crate::service::MediaLibraryDomainService::validate_paths_json(&new_paths_json)?;
        self.paths_json = new_paths_json;
        self.update_time = chrono::Local::now().format("%Y-%m-%d %H:%M:%S").to_string();
        Ok(())
    }

    /// 更新项目数量
    ///
    /// # 参数
    /// - `new_count`: 新项目数量
    ///
    /// # 业务规则
    /// - 项目数量必须大于等于 0
    pub fn update_item_count(&mut self, new_count: i32) -> anyhow::Result<()> {
        crate::service::MediaLibraryDomainService::validate_item_count(new_count)?;
        self.item_count = new_count;
        self.update_time = chrono::Local::now().format("%Y-%m-%d %H:%M:%S").to_string();
        Ok(())
    }

    /// 增加项目数量
    ///
    /// # 参数
    /// - `count`: 增加的数量
    pub fn increment_item_count(&mut self, count: i32) -> anyhow::Result<()> {
        let new_count = self.item_count + count;
        self.update_item_count(new_count)
    }

    /// 减少项目数量
    ///
    /// # 参数
    /// - `count`: 减少的数量
    pub fn decrement_item_count(&mut self, count: i32) -> anyhow::Result<()> {
        let new_count = self.item_count - count;
        if new_count < 0 {
            return Err(anyhow::anyhow!("Item count cannot be negative"));
        }
        self.update_item_count(new_count)
    }

    /// 设置封面
    ///
    /// # 参数
    /// - `cover_url`: 封面 URL
    pub fn set_cover(&mut self, cover_url: String) {
        self.cover = Some(cover_url);
        self.update_time = chrono::Local::now().format("%Y-%m-%d %H:%M:%S").to_string();
    }

    /// 清除封面
    pub fn clear_cover(&mut self) {
        self.cover = None;
        self.update_time = chrono::Local::now().format("%Y-%m-%d %H:%M:%S").to_string();
    }

    /// 更新最后扫描时间
    pub fn update_last_scanned(&mut self) {
        let now = chrono::Local::now().format("%Y-%m-%d %H:%M:%S").to_string();
        self.last_scanned = now.clone();
        self.update_time = now;
    }

    /// 判断是否有封面
    pub fn has_cover(&self) -> bool {
        self.cover.is_some()
    }

    /// 判断是否有项目
    pub fn has_items(&self) -> bool {
        self.item_count > 0
    }

    /// 判断是否支持扫描
    pub fn is_scannable(&self) -> bool {
        crate::service::MediaLibraryDomainService::is_scannable_media_type(&self.media_type)
    }

    /// 获取路径列表
    pub fn get_paths(&self) -> anyhow::Result<Vec<String>> {
        crate::service::MediaLibraryDomainService::parse_paths_json(&self.paths_json)
    }

    /// 获取封面 URL（如果没有封面，返回默认封面）
    pub fn get_cover_or_default(&self) -> String {
        self.cover.clone().unwrap_or_else(|| {
            format!("/api/media-library/{}/cover", self.id)
        })
    }
}
